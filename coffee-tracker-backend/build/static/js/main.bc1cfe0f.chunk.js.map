{"version":3,"sources":["input.js","coffeemug.js","output.js","edit.js","list.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","id","message","name","coffee","datePurchased","date","putDataToDB","event","preventDefault","currentIds","_this","props","data","map","idToBeAdded","includes","axios","post","_this2","this","react_default","a","createElement","className","type","required","onChange","e","setState","target","value","autoComplete","onClick","Component","Coffeemug","coffeeMugs","i","purchased","push","src","alt","width","height","key","Output","purchasers","forEach","person","purchaser","find","undefined","length","coffeemug","Edit","idToDelete","idToUpdate","objectToUpdate","deleteFromDB","idTodelete","objIdToDelete","dat","_id","delete","updateDB","updateToApply","updateToDate","objIdToUpdate","update","List","reversed","reverse","dist_default","format","App","intervalIsSet","hasInitialData","getDataFromDb","fetch","then","json","res","socket","io","connect","on","output","esm","input","list","edit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc1cfe0f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport './App.css';\r\n\r\nclass Input extends Component {\r\n\r\n  // initialize our state\r\n    state = {\r\n      id: 0,\r\n      message: null,\r\n      name: null,\r\n      coffee: null,\r\n      datePurchased: null,\r\n      date: null,\r\n    };\r\n\r\n    // our put method that uses our backend api\r\n    // to create new query into our data base\r\n    putDataToDB = (message, name, coffee, date, datePurchased, event) => {\r\n\r\n      event.preventDefault(); // stop the page from refreshing\r\n\r\n      // just a note, here, in the front end, we use the id key of our data object\r\n      // in order to identify which we want to Update or delete.\r\n      // for our back end, we use the object id assigned by MongoDB to modify\r\n      // data base entries\r\n\r\n      let currentIds = this.props.data.map(data => data.id);\r\n      let idToBeAdded = 0;\r\n      while (currentIds.includes(idToBeAdded)) {\r\n        ++idToBeAdded;\r\n      }\r\n\r\n      axios.post(\"/api/putData\", {\r\n        id: idToBeAdded,\r\n        message: message,\r\n        name: name,\r\n        coffee: coffee,\r\n        date: date,\r\n        datePurchased: datePurchased,\r\n      });\r\n    };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"bigPadding\">\r\n\r\n        <div className=\"smallPadding\">\r\n        <h4>Add a coffee to the database</h4>\r\n          <input\r\n            type=\"text\"\r\n            required\r\n            onChange={e => this.setState({ coffee: e.target.value })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"smallPadding\">\r\n        <h4>Who bought the coffee?</h4>\r\n          <input\r\n            type=\"text\"\r\n            autoComplete=\"given-name\"\r\n            required\r\n            onChange={e => this.setState({ name: e.target.value })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"smallPadding\">\r\n        <h4>What date was it purchased?</h4>\r\n          <input\r\n            type=\"date\"\r\n            onChange={e => this.setState({ datePurchased: e.target.value })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"smallPadding\">\r\n        <h4>What date was it opened?</h4>\r\n          <input\r\n            type=\"date\"\r\n            onChange={e => this.setState({ date: e.target.value })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"smallPadding\">\r\n        <h4>Add a note about the coffee</h4>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e => this.setState({ message: e.target.value })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"smallPadding\">\r\n\r\n          <button onClick={(event) => this.putDataToDB(this.state.message, this.state.name, this.state.coffee, this.state.date, this.state.datePurchased, event)}>\r\n\r\n            <h4>Add to database</h4>\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nclass Coffeemug extends Component {\r\n\r\n  render() {\r\n    var coffeeMugs = [];\r\n    for(var i=0; i<this.props.purchased; i++){\r\n      coffeeMugs.push(\"mug\" + i);\r\n    }\r\n\r\n    return (\r\n      <ul className=\"coffeeMug\">\r\n        {coffeeMugs.map(purchased => (\r\n                <img src=\"./coffee.ico\" alt=\"icon of a coffee mug\" width=\"50\" height=\"50\" key={this.props.name + purchased}></img>\r\n            ))}\r\n      </ul>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Coffeemug;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Coffeemug from './coffeemug.js';\r\nclass Output extends Component {\r\n  render() {\r\n\r\n    let purchasers = [];\r\n    this.props.data.forEach( person => {\r\n      let purchaser = purchasers.find(purchaser => {return purchaser.name === person.name});\r\n\r\n      if (purchaser !== undefined) {\r\n        purchaser.purchased++\r\n      }else {\r\n        purchasers.push({name:person.name, purchased: 1})\r\n      }\r\n    })\r\n\r\n    return (\r\n      <div className=\"bigPadding\">\r\n        <ul>\r\n          {purchasers.length <= 0\r\n            ? \"NO DB ENTRIES YET\"\r\n            : purchasers.map(purchaser => (\r\n                <div className=\"outputBox\" key={purchaser.name}>\r\n                  <h2 className=\"coffeeMugName\">{purchaser.name}:</h2>\r\n                  <Coffeemug purchased={purchaser.purchased} name={purchaser.name} />\r\n                </div>\r\n              ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Output;\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport './App.css';\r\n\r\nclass Edit extends Component {\r\n\r\n  // initialize our state\r\n    state = {\r\n      idToDelete: null,\r\n      idToUpdate: null,\r\n      objectToUpdate: null,\r\n    };\r\n\r\n    // our delete method that uses our backend api\r\n    // to remove existing database information\r\n    deleteFromDB = idTodelete => {\r\n      let objIdToDelete = null;\r\n      this.props.data.forEach(dat => {\r\n        if (dat.id == idTodelete) {\r\n          objIdToDelete = dat._id;\r\n        }\r\n      });\r\n\r\n      axios.delete(\"/api/deleteData\", {\r\n        data: {\r\n          id: objIdToDelete\r\n        }\r\n      });\r\n    };\r\n\r\n\r\n    // our update method that uses our backend api\r\n    // to overwrite existing data base information\r\n    updateDB = (idToUpdate, updateToApply, updateToDate) => {\r\n      let objIdToUpdate = null;\r\n      this.props.data.forEach(dat => {\r\n        if (dat.id == idToUpdate) {\r\n          objIdToUpdate = dat._id;\r\n        }\r\n      });\r\n\r\n      axios.post(\"/api/updateData\", {\r\n        id: objIdToUpdate,\r\n        update: {\r\n          message: updateToApply,\r\n          date: updateToDate}\r\n      });\r\n    };\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"outputBoxEdit\">\r\n\r\n        <div className=\"deleting\">\r\n            <div className=\"smallPadding\">\r\n              <h4>Id of item to delete</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  onChange={e => this.setState({ idToDelete: e.target.value })}\r\n                />\r\n            </div>\r\n\r\n            <div className = \"smallPadding\">\r\n              <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\r\n                <h4>DELETE</h4>\r\n              </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"editing\">\r\n            <div className=\"smallPadding\">\r\n              <h4>Id of item to update</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  onChange={e => this.setState({ idToUpdate: e.target.value })}\r\n                />\r\n              <h4>New message</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  onChange={e => this.setState({ updateToApply: e.target.value })}\r\n                />\r\n              <h4>New opened date</h4>\r\n                <input\r\n                  type=\"date\"\r\n                  onChange={e => this.setState({ updateToDate: e.target.value })}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"smallPadding\">\r\n              <button\r\n                onClick={() =>\r\n                  this.updateDB(this.state.idToUpdate, this.state.updateToApply, this.state.updateToDate)\r\n                }\r\n              >\r\n                <h4>UPDATE</h4>\r\n              </button>\r\n            </div>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Edit;\r\n","import React, { Component } from 'react';\r\nimport Moment from 'react-moment';\r\nimport './App.css';\r\n\r\nclass List extends Component {\r\n\r\n  render() {\r\n\r\n    if (this.props.data && this.props.data.length < 1) return <p>No coffee entered yet</p>;\r\n\r\n    this.reversed = this.props.data.reverse();\r\n\r\n    return (\r\n      <div className=\"smallPadding\">\r\n        <table className=\"table\">\r\n          <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Name</th>\r\n            <th>Date Purchased</th>\r\n            <th>Date Opened</th>\r\n            <th>Coffee</th>\r\n            <th>Note</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n\t\t\t\t\t{this.reversed.map(data => (\r\n          <tr key={data.id}>\r\n            <td>\r\n\t\t\t\t\t\t\t{data.id}\r\n            </td>\r\n            <td>\r\n\t\t\t\t\t\t\t{data.name}\r\n            </td>\r\n            <td>\r\n              {\r\n                ((typeof(data.datePurchased) === 'undefined') || (data.datePurchased === null))\r\n                  ? <p>No data</p>\r\n                  : <Moment format=\"DD/MM/YYYY\">{data.datePurchased}</Moment>\r\n              }\r\n            </td>\r\n            <td>\r\n              {\r\n                ((typeof(data.date) === 'undefined') || (data.date === null))\r\n                  ? <p>No data</p>\r\n                  : <Moment format=\"DD/MM/YYYY\">{data.date}</Moment>\r\n              }\r\n            </td>\r\n            <td>\r\n\t\t\t\t\t\t\t{data.coffee}\r\n            </td>\r\n            <td>\r\n\t\t\t\t\t\t\t{data.message}\r\n            </td>\r\n          </tr>\r\n\t\t\t\t\t))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Input from './input.js';\r\nimport Output from './output.js';\r\nimport Edit from './edit.js';\r\nimport List from './list.js';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport io from 'socket.io-client';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n      data: [],\r\n      intervalIsSet: false,\r\n      hasInitialData: false,\r\n    };\r\n\r\n    socket;\r\n\r\n    // when component mounts, first thing it does is fetch all existing data in our db\r\n    // then we incorporate a polling logic so that we can easily see if our db has\r\n    // changed and implement those changes into our UI\r\n    componentDidMount() {\r\n      this.getDataFromDb();\r\n      this.socket = io.connect();\r\n      //this is where we are listening for the socket.io message sent from the server, which tells us to go and get the data again if something has changed.\r\n      this.socket.on(\"NewData\", this.getDataFromDb);\r\n    };\r\n\r\n\r\n\r\n    // our first get method that uses our backend api to\r\n    // fetch data from our data base\r\n    getDataFromDb = () => {\r\n      fetch(\"/api/getData\")\r\n        .then(data => data.json())\r\n        .then(res => {\r\n          this.setState({ data: res.data, hasInitialData:true })\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n      if (!this.state.hasInitialData ) return <h1>Loading...</h1>;\r\n\r\n      return (\r\n        <div>\r\n\r\n          <Output data={this.state.data} />\r\n\r\n            <Tabs>\r\n              <TabList>\r\n                <Tab><h3>Add a coffee</h3></Tab>\r\n                <Tab><h3>See all entries</h3></Tab>\r\n                <Tab><h3>Edit an entry</h3></Tab>\r\n              </TabList>\r\n\r\n              <TabPanel>\r\n                <Input data={this.state.data}/>\r\n              </TabPanel>\r\n              <TabPanel>\r\n                <List data={this.state.data}/>\r\n              </TabPanel>\r\n              <TabPanel>\r\n                <Edit data={this.state.data}/>\r\n              </TabPanel>\r\n            </Tabs>\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}